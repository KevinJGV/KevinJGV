---
interface Props {
	text: string;
	href: string;
	hrefImages?: string[];
	cover?: string;
	txtColor?: string;
	bgColor?: string;
	tags?: { [key: string]: string };
}

const {
	text,
	href,
	hrefImages,
	cover = `<svg xmlns="http://www.w3.org/2000/svg" width="" height="" viewBox="0 0 32 32"><defs><filter id="inset-shadow"><feOffset dx="0" dy="0" /><feGaussianBlur stdDeviation="1" result="offset-blur" /><feComposite operator="out" in="SourceGraphic" in2="offset-blur" result="inverse" /><feFlood flood-color="#838383" flood-opacity="0.8" result="color" /><feComposite operator="in" in="color" in2="inverse" result="shadow" /></filter></defs><g filter="url(#inset-shadow)"><path fill="#fff" d="M20.42 21.157l2.211 2.211L30 16l-7.369-7.369l-2.211 2.212L25.58 16ZM11.58 10.843L9.369 8.631 2 16l7.369 7.369 2.211-2.211L6.42 16Zm5.831-3.166l1.6.437-4.42 16.209-1.6-.437z" /></g></svg>`,
	txtColor = "#fff",
	bgColor = "#fff3",
	tags = {},
} = Astro.props;

import { string } from "astro:schema";
import { readFile } from "node:fs/promises";
import path from "node:path";

async function readSvgFile(svgPath: string) {
	try {
		const fullPath = path.join("public/", svgPath);
		const svgContent = await readFile(fullPath, "utf-8");
		return svgContent;
	} catch (error) {
		console.error(`Error reading SVG file: ${error}`);
	}
}

async function tagItem(
	key: string,
	svgContent: string,
	bgColor: string,
	color_fill: string,
) {
	const svg = await readSvgFile(svgContent);
	return `
		<li class="Alumni flex all_c" style="--bgColor: ${bgColor}; --txtColor: ${color_fill}">
			${svg}
			<span>${key}</span>
		</li>
	`;
}

async function renderTagItem(key: string, setting: string) {
	if (!key.startsWith("template")) {
		return await tagItem(key, setting);
	}

	const tagConfigs = {
		"e-commerce": {
			label: "E-commerce",
			path: "tags/function/cart.svg",
			bgColor: "#264653cc",
			txtColor: "#fff",
		},
		technology: {
			label: "Technologia",
			path: "tags/purpose/technology.svg",
			bgColor: "#6c8c65bb",
			txtColor: "#000",
		},
		frontend: {
			label: "Frontend",
			path: "tags/role/frontend.svg",
			bgColor: "#6f1d1bbb",
			txtColor: "#fff",
		},
		uiux: {
			label: "UI/UX",
			path: "tags/role/uiux.svg",
			bgColor: "#f4d35ebb",
			txtColor: "#000",
		},
		entertainment: {
			label: "Entretenimiento",
			path: "tags/purpose/entertainment.svg",
			bgColor: "#2a9d8fbb",
			txtColor: "#000",
		},
		api: {
			label: "API",
			path: "tags/type/api.svg",
			bgColor: "#00000099",
			txtColor: "#fff",
		},
		manager: {
			label: "Administrador",
			path: "tags/function/manager.svg",
			bgColor: "#8d99aebb",
			txtColor: "#000",
		},
		dashboard: {
			label: "DashBoard",
			path: "tags/type/dashboard.svg",
			bgColor: "#ff6d00bb",
			txtColor: "#000",
		},
		modeling: {
			label: "Modelado",
			path: "tags/function/modeling.svg",
			bgColor: "#042a2b",
			txtColor: "#fff",
		},
		business: {
			label: "Negocio",
			path: "tags/purpose/business.svg",
			bgColor: "#ff6b6bbb",
			txtColor: "#000",
		},
		leadership: {
			label: "LÃ­derazgo",
			path: "tags/role/leadership.svg",
			bgColor: "#7a9e9fbb",
			txtColor: "#000",
		},
		mysql: {
			label: "MySql",
			path: "tags/tech/mysql.svg",
			bgColor: "#04a777bb",
			txtColor: "#000",
		},
		db: {
			label: "DB",
			path: "tags/type/db.svg",
			bgColor: "#f0f0c9bb",
			txtColor: "#000",
		},
	};

	const config = tagConfigs[setting as keyof typeof tagConfigs];
	if (config) {
		return await tagItem(
			config.label,
			config.path,
			config.bgColor,
			config.txtColor,
		);
	}
	return "";
}

const processedTags = await Promise.all(
	Object.entries(tags).map(
		async ([key, setting]) => await renderTagItem(key, setting),
	),
);
---

<a
	href={href}
	class="pCard flex_col glass0 relative"
	target="_blank"
	style={`color: ${txtColor}; background-color: ${bgColor};`}
>
	{
		cover && cover.toLowerCase().endsWith("</svg>") ? (
			<div class="imageCard flex j_c absolute" set:html={cover} />
		) : (
			<div class="imageCard flex j_c absolute">
				<img src={cover} alt="" loading="lazy" />
			</div>
		)
	}

	<ul class="tags absolute flex wrap j_sa">
		{processedTags.map((tag) => <Fragment set:html={tag} />)}
	</ul>

	<p class="Poppins-S text_center absolute">
		<span>{text}</span>
	</p>

	{
		hrefImages ? (
			<div class="card_carousel flex absolute">
				{hrefImages.map((capture) => (
					<img src={capture} alt="" />
				))}
			</div>
		) : (
			<div class="card_carousel flex absolute" />
		)
	}
</a>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const pCards = document.querySelectorAll(".pCard");
		let timeoutId = null;
		const timeouts = {};

		const setTimeoutWithKey = (key, callback, delay) => {
			if (timeouts[key]) clearTimeout(timeouts[key]);
			timeouts[key] = setTimeout(() => {
				callback();
				delete timeouts[key];
			}, delay);
		};

		const calculateDimensions = () => {
			const cardsContainer = document.querySelector("#projects > div");
			if (!cardsContainer) return;

			const containerWidth = cardsContainer.clientWidth;
			const totalCards = pCards.length;
			const growFactor = 4;
			const shrinkFactor = 1;
			const totalFlex = (totalCards - 1) * shrinkFactor + growFactor;
			const maxCardWidth =
				Math.round((containerWidth * growFactor) / totalFlex) - 9;
			[".tags", ".card_carousel"].forEach((clase) =>
				document.querySelectorAll(clase).forEach((bunch_elements) => {
					bunch_elements.style.width = `${maxCardWidth}px`;
				}),
			);

			let maxEstimatedHeight = 0;
			document.querySelectorAll(".card_carousel").forEach((carousel) => {
				carousel.querySelectorAll("img").forEach((img) => {
					const aspectRatio = img.naturalHeight / img.naturalWidth;
					maxEstimatedHeight = Math.max(
						maxEstimatedHeight,
						maxCardWidth * aspectRatio,
					);
				});
			});

			pCards.forEach((pCard) => {
				pCard.style.setProperty(
					"--carousel-height",
					`${maxEstimatedHeight}px`,
				);
			});
		};

		const updateStyles = (hoveredCard) => {
			const styleUpdatesHovered = [
				{
					selector: "p",
					styles: {
						fontSize: "1rem",
						paddingBottom: `${hoveredCard.querySelector(".tags").offsetHeight - parseFloat(getComputedStyle(document.documentElement).fontSize)}px`,
					},
				},
				{
					selector: ".tags",
					styles: { zIndex: 11 },
				},
				{
					selector: ".imageCard",
					styles: {
						opacity: hoveredCard.querySelector(".card_carousel").children.length != 0 ? "0" : "1",
					},
				},
			];

			const styleUpdatesNonHovered = [
				{
					selector: "p",
					styles: { fontSize: "0" },
				},
				{
					selector: ".tags",
					styles: { zIndex: 3 },
				},
			];

			pCards.forEach((otherCard) => {
				if (otherCard === hoveredCard) {
					styleUpdatesHovered.forEach(({ selector, styles }) => {
						const element = otherCard.querySelector(selector);
						if (element) {
							Object.keys(styles).forEach((prop) => {
								element.style[prop] = styles[prop];
							});
						}
					});
				} else {
					styleUpdatesHovered.forEach(({ selector, styles }) => {
						const element = otherCard.querySelector(selector);
						if (element) {
							Object.keys(styles).forEach((prop) => {
								const nonHoveredStyle =
									styleUpdatesNonHovered.find(
										(item) => item.selector === selector,
									);

								if (
									nonHoveredStyle &&
									nonHoveredStyle.styles[prop] !== undefined
								) {
									element.style[prop] =
										nonHoveredStyle.styles[prop];
								} else {
									element.style.removeProperty(prop);
								}
							});
						}
					});
				}
			});
		};

		const resetStyles = () => {
			if (timeoutId) clearTimeout(timeoutId);
			timeoutId = setTimeout(() => {
				pCards.forEach((card) => {
					["p", ".tags", ".imageCard"].forEach((selector) => {
						const element = card.querySelector(selector);
						if (element) {
							element.style.removeProperty("font-size");
							element.style.removeProperty("bottom");
							element.style.removeProperty("opacity");
							element.style.removeProperty("padding-bottom");
							element.style.removeProperty("z-index");
						}
					});
				});
			}, 99);
		};

		const initCarousel = (card) => {
			const images = card.querySelectorAll(".card_carousel img");
			let currentIndex = 0;
			let direction = 1;
			let interval;

			const startCarousel = () => {
				interval = setInterval(() => {
					images[currentIndex].style.display = "none";
					images[currentIndex].classList.remove("active");
					currentIndex += direction;

					if (currentIndex >= images.length) {
						currentIndex = images.length - 2;
						direction = -1;
					} else if (currentIndex < 0) {
						currentIndex = 1;
						direction = 1;
					}

					images[currentIndex].style.display = "block";
					images[currentIndex].classList.add("active");
				}, 1500);
			};

			const stopCarousel = () => {
				clearInterval(interval);
				images.forEach((img, index) => {
					img.style.display = index === 0 ? "block" : "none";
					img.classList.toggle("active", index === 0);
				});
				currentIndex = 0;
				direction = 1;
			};

			return { startCarousel, stopCarousel };
		};

		pCards.forEach((card) => {
			const { startCarousel, stopCarousel } = initCarousel(card);

			card.addEventListener("mouseover", () => {
				startCarousel();
				if (timeoutId) clearTimeout(timeoutId);
				updateStyles(card);
			});

			card.addEventListener("mouseout", () => {
				stopCarousel();
				resetStyles();
			});
		});

		calculateDimensions();
		window.addEventListener("resize", () => {
			setTimeoutWithKey("resizeDimensions", calculateDimensions, 99);
		});
	});
</script>

<style define:vars={{ bgColor, txtColor }}>
	.card_carousel img {
		transition: opacity 0.5s ease;
		width: 100%;
	}

	.pCard span {
		min-width: 14em;
		padding: 0.5em;
		text-align: center;
		transform: rotate(-90deg);
		transition: all 0.5s;
		text-transform: uppercase;
		color: var(--txtColor);
		letter-spacing: 0.1em;
	}

	.card_carousel img:first-child {
		display: block;
	}

	.card_carousel img:not(:first-child) {
		display: none;
	}

	.imageCard {
		z-index: 5;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: var(--bgColor);
		align-items: center;
	}

	.pCard p {
		font-size: 1rem;
		left: 0;
		right: 0;
		padding: 0.5rem;
		bottom: 0;
		z-index: 10;
	}

	.pCard:hover p {
		background-color: var(--bgColor);
	}

	.pCard .tags {
		list-style: none;
		padding: 1rem;
		margin: 0;
		z-index: 3;
		width: 100%;
		bottom: 0;
		background-color: var(--bgColor);
		gap: 1rem;
	}
</style>
