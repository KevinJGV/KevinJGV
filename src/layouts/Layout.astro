---
import GlobalStyles from "../styles/GlobalStyles.astro";
import Tools from "../components/Tools.astro";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link id="icon" rel="icon" type="image/svg+xml" href="/circle.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <GlobalStyles />
    <ViewTransitions />
  </head>
  <body class="noise flex j_sb">
    <!-- <div id="dot-container" class="fixed" transition:persist></div> -->
    <audio
      id="audio-player"
      transition:persist
      src="/VIN.ogg"
      autoplay
      loop
      preload="auto"
      muted></audio>
    <slot name="navbar" data-astro-transition="swap" />
    <!-- <Tools /> -->
    <section id="side-container" class="relative flex" transition:persist>
      <slot name="sidebar" data-astro-transition="persist" />
    </section>
    <section id="content-container" class="relative">
      <main class="flex_col view-transition">
        <slot name="main" data-astro-transition="swap" />
      </main>
      <slot
        name="footer"
        data-astro-transition="persist"
        transition:animate="fade"
      />
    </section>
    <svg class="curzr-motion">
      <filter id="motionblur" x="-100%" y="-100%" width="400%" height="400%">
        <feGaussianBlur class="curzr-motion-blur" stdDeviation="0, 0"
        ></feGaussianBlur>
      </filter>
      <circle cx="50%" cy="50%" r="6" fill="#fff" filter="url(#motionblur)"
      ></circle>
      <circle cx="50%" cy="50%" r="5" fill="#000" filter="url(#motionblur)"
      ></circle>
    </svg>
  </body>
</html>
<script>
  const activeIcon: string = "/circle.svg";
  const inactiveIcon: string = "/cross.svg";

  function changeFavicon(iconURL: string): void {
    const favicon = document.getElementById("icon") as HTMLLinkElement;
    if (favicon) {
      favicon.href = iconURL;
    }
  }

  document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "visible") {
      changeFavicon(activeIcon);
    } else {
      changeFavicon(inactiveIcon);
    }
  });

  let deviceWidth = window.innerWidth;
  document.body.style.width = `${deviceWidth}px`;
  window.addEventListener("resize", () => {
    deviceWidth = window.innerWidth;
    document.body.style.width = `${deviceWidth}px`;
  });

  document.addEventListener("DOMContentLoaded", () => {
    const sidebarRef = document.querySelector(
      "#side-container"
    ) as HTMLElement;
    const updateSidebarSize = () => {
      const aside = sidebarRef.querySelector("aside");

      const { width, height } = aside.getBoundingClientRect();
      sidebarRef.style.width = `${width}px`;
      sidebarRef.style.height = `${height}px`;
    };

    const mediaQuery = window.matchMedia("(max-width: 1075px)");

    const handleMediaChange = (event) => {
      if (event.matches) {
        sidebarRef.style.display = "none";
      } else {
        sidebarRef.style.display = "flex";
        updateSidebarSize();
      }
    };

    mediaQuery.addEventListener("change", handleMediaChange);
    handleMediaChange(mediaQuery);

    const audioPlayer = document.querySelector("#audio-player");

    audioPlayer.addEventListener("ended", function () {
      this.currentTime = 0;
      this.play();
    });

    const tryPlayAudio = () => {
      audioPlayer.muted = false;
      audioPlayer.play().catch((error) => {
        console.log("ReproducciÃ³n bloqueada:", error);
      });
    };

    const enableAudioOnInteraction = () => {
      const events = [
        "click",
        "dblclick",
        "mousemove",
        "mouseup",
        "mousedown",
        "scroll",
        "keydown",
        "keyup",
        "keypress",
        "touchstart",
        "touchend",
        "visibilitychange",
        "focus",
        "blur",
        "pointerdown",
        "pointerup",
        "contextmenu",
        "dragstart",
        "dragend",
      ];

      events.forEach((event) => {
        document.addEventListener(
          event,
          () => {
            tryPlayAudio();
          },
          { once: true }
        );
      });
    };

    enableAudioOnInteraction();
    setTimeout(() => {
      audioPlayer.muted = false;
      audioPlayer.play();
    }, 1000);
  });
</script>
<script src="/src/components/dots.js"></script>
<script type="module">
  import MotionCursor from "/src/components/motion-cursor.js";
  document.addEventListener("DOMContentLoaded", () => {
    document.addEventListener("astro:page-load", () => {
      const cursor = new MotionCursor();
      document.onmousemove = function (event) {
        cursor.move(event);
      };
      document.ontouchmove = function (event) {
        cursor.move(event.touches[0]);
      };
    });
  });
</script>
<style>
  #dot-container {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    overflow: hidden;
  }

  #side-container {
    z-index: 20;
    margin: 5px;
    flex-shrink: 0;
  }

  #content-container {
    z-index: 10;
    flex-grow: 2;
  }

  main {
    gap: 5rem;
  }

  .curzr-motion {
    width: 75px;
  }

  @media screen and (min-width: 1440px) {
    main {
      width: 1200px;
      justify-self: center;
    }
  }

  @media screen and (max-width: 425px) {
    #content-container {
      margin-inline:1rem;
    }
  }
</style>
